// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  fullname  String?
  password  String
  avatar    String?

  role           UserRole
  candidate_info CandidateUser[] @relation("CandidateToUser")
  employer_info  EmployerUser[]  @relation("EmployerToUser")
}

model CandidateUser {
  id String @id @default(uuid())

  userId String
  user   User[] @relation("CandidateToUser")

  expectations Decimal @default(1500)
  country      String  @default("Україна")
  city         String  @default("Київ")
  isRelocate   Boolean @default(false)
  experience   Decimal @default(0)

  category          String?
  hourlyRate        Decimal?
  position          String?
  experienceDescr   String?
  expectationsDescr String?
  achievementsDescr String?
  employerQuestions String?

  preferableLang    PreferableLanguage?
  english           EnglishLevel        @default(NoEnglish)
  employmentOptions EmploymentOption    @default(Remote)
  communicateMethod CommunicateMethod   @default(Djinni)

  skype      String?
  phone      String?
  telegram   String?
  whatsApp   String?
  linkedIn   String?
  github     String?
  portfolio  String?
  resumeFile String?

  blockedDomains BlockedDomain[]      @relation("BlockedDomainToCandidate")
  blockedTypes   BlockedVacancyType[] @relation("BlockedVacancyTypeToCandidate")
  skills         CandidateSkill[]     @relation("SkillToCandidate")
}

model BlockedDomain {
  id   String @id @default(uuid())
  name String

  candidateId String?
  candidate   CandidateUser? @relation("BlockedDomainToCandidate", fields: [candidateId], references: [id])

  @@index([candidateId])
}

model BlockedVacancyType {
  id   String @id @default(uuid())
  name String

  candidateId String?
  candidate   CandidateUser? @relation("BlockedVacancyTypeToCandidate", fields: [candidateId], references: [id])

  @@index([candidateId])
}

model CandidateSkill {
  id       String  @id @default(uuid())
  name     String
  category String?

  candidateId String?
  candidate   CandidateUser? @relation("SkillToCandidate", fields: [candidateId], references: [id])

  @@index([candidateId])
}

model EmployerUser {
  id String @id @default(uuid())

  userId String
  user   User[] @relation("EmployerToUser")

  positionAndCompany String?
  telegram           String?
  linkedIn           String?
  companyLink        String?
  dou                String?
  phone              String?
  aboutCompany       String?

  vacancies Vacancy[]
}

model Vacancy {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String
  domain            String
  description       String
  category          String
  employmentOptions EmploymentOption @default(Remote)
  country           String           @default("Україна")
  city              String
  isRelocate        Boolean          @default(false)
  salaryGte         Decimal
  salaryLte         Decimal
  experience        Decimal          @default(0)
  english           EnglishLevel     @default(NoEnglish)
  companyType       CompanyType      @default(None)
  clarifiedData     ClarifiedData[]
  youtube           String?

  employerId String
  employer   EmployerUser @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@index([employerId])
}

model ClarifiedData {
  id   String            @id @default(uuid())
  name ClarifiedDataEnum @default(None)

  vacancyId String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)

  @@index([vacancyId])
}

model Offer {
  id String @id @default(uuid())
}

// ENUMS 

enum ClarifiedDataEnum {
  None
  Part_time
  Test_task
  Cover_letter
}

enum CompanyType {
  None
  Product
  Outsource
  Outstaff
  Agency
}

enum UserRole {
  Employer
  Candidate
}

enum EnglishLevel {
  NoEnglish
  BeginnerElementary
  PreIntermediate
  Intermediate
  UpperIntermediate
  AdvancedFluent
}

enum EmploymentOption {
  Remote
  Office
  PartTime
  Freelance
  RelocateCity
  RelocateCountry
}

enum CommunicateMethod {
  Djinni
  Email
  Phone
  Skype
  WhatsApp
  Telegram
  LinkedIn
}

enum PreferableLanguage {
  Ukrainian
  English
}
