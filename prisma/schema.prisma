// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  avatar    String?

  role           UserRole
  candidate_info CandidateUser[] @relation("CandidateToUser")
  employer_info  EmployerUser[]  @relation("EmployerToUser")
  ReplyOnOffer   ReplyOnOffer[]
}

model CandidateUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  views     Int?     @default(0)

  userId String
  user   User[] @relation("CandidateToUser")

  fullname     String?
  expectations Int     @default(1500)
  country      String  @default("Україна")
  city         String  @default("Київ")
  isRelocate   Boolean @default(false)
  experience   Int     @default(0)
  filled       Boolean @default(false)

  category          String?
  hourlyRate        Int?
  position          String?
  experienceDescr   String? @db.VarChar(1500)
  expectationsDescr String? @db.VarChar(1500)
  achievementsDescr String? @db.VarChar(1500)
  employerQuestions String? @db.VarChar(800)

  preferableLang    PreferableLanguage?
  english           EnglishLevel        @default(NoEnglish)
  employmentOptions EmploymentOption    @default(Remote)
  communicateMethod CommunicateMethod   @default(Djinni)

  skype      String?
  phone      String?
  telegram   String?
  whatsApp   String?
  linkedIn   String?
  github     String?
  portfolio  String?
  resumeFile String?

  blockedDomains BlockedDomain[]      @relation("BlockedDomainToCandidate")
  blockedTypes   BlockedVacancyType[] @relation("BlockedVacancyTypeToCandidate")
  skills         CandidateSkill[]     @relation("SkillToCandidate")
  Offer          Offer[]
}

model BlockedDomain {
  id   String @id @default(cuid())
  name String

  candidateId String?
  candidate   CandidateUser? @relation("BlockedDomainToCandidate", fields: [candidateId], references: [id])

  @@index([candidateId])
}

model BlockedVacancyType {
  id   String @id @default(cuid())
  name String

  candidateId String?
  candidate   CandidateUser? @relation("BlockedVacancyTypeToCandidate", fields: [candidateId], references: [id])

  @@index([candidateId])
}

model CandidateSkill {
  id       String  @id @default(cuid())
  name     String
  category String?

  candidateId String?
  candidate   CandidateUser? @relation("SkillToCandidate", fields: [candidateId], references: [id])

  @@index([candidateId])
}

model EmployerUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User[] @relation("EmployerToUser")

  fullname           String?
  companyName        String?
  positionAndCompany String?
  telegram           String?
  linkedIn           String?
  companyLink        String?
  dou                String?
  phone              String?
  aboutCompany       String?
  filled             Boolean @default(false)

  vacancies Vacancy[]
  offers    Offer[]
}

model Vacancy {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  active         Boolean  @default(false)
  responsesCount Int      @default(0)

  name                 String
  domain               String
  description          String           @db.VarChar(14000)
  category             String
  employmentOptions    EmploymentOption @default(Remote)
  country              String           @default("Україна")
  city                 String?
  isRelocate           Boolean          @default(false)
  salaryForkGte        Int?
  salaryForkLte        Int?
  privateSalaryForkGte Int
  privateSalaryForkLte Int
  experience           Int              @default(0)
  english              EnglishLevel     @default(NoEnglish)
  companyType          CompanyType      @default(None)
  clarifiedData        ClarifiedData[]
  youtube              String?
  keywords             VacancyKeyword[]

  employerId String
  employer   EmployerUser @relation(fields: [employerId], references: [id], onDelete: Cascade)

  offers Offer[]

  @@index([employerId])
}

model Offer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coverLetter String

  vacancyId   String
  vacancy     Vacancy        @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  employerId  String
  employer    EmployerUser   @relation(fields: [employerId], references: [id], onDelete: Cascade)
  candidateId String
  candidate   CandidateUser  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  replies     ReplyOnOffer[]

  @@index([vacancyId])
  @@index([employerId])
  @@index([candidateId])
}

model ReplyOnOffer {
  id        String   @id @default(nanoid(2))
  createdAt DateTime @default(now())
  updatetAt DateTime @updatedAt

  text     String @db.Text
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  offerId  String
  offer    Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)

  replyToId String?
  replyTo   ReplyOnOffer?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   ReplyOnOffer[] @relation("ReplyTo")

  @@index([offerId])
  @@index([authorId])
  @@index([replyToId])
}

model VacancyKeyword {
  id   String @id @default(cuid())
  name String

  vacancyId String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)

  @@index([vacancyId])
}

model ClarifiedData {
  id   String            @id @default(cuid())
  name ClarifiedDataEnum @default(None)

  vacancyId String
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)

  @@index([vacancyId])
}

// ENUMS 

enum ClarifiedDataEnum {
  None
  Part_time
  Test_task
  Cover_letter
}

enum CompanyType {
  None
  Product
  Outsource
  Outstaff
  Agency
}

enum UserRole {
  Employer
  Candidate
}

enum EnglishLevel {
  NoEnglish
  BeginnerElementary
  PreIntermediate
  Intermediate
  UpperIntermediate
  AdvancedFluent
}

enum EmploymentOption {
  Remote
  Office
  PartTime
  Freelance
  RelocateCity
  RelocateCountry
}

enum CommunicateMethod {
  Djinni
  Email
  Phone
  Skype
  WhatsApp
  Telegram
  LinkedIn
}

enum PreferableLanguage {
  Ukrainian
  English
}
